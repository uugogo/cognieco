#!/usr/bin/env python2.7#-*- coding:utf8 -*-import urllibimport tornado.webimport tornado.escapefrom _base_ import BaseHandlerfrom urllib import quote, unquoteimport pymongoimport timeimport datetimedbconn = "106.185.28.67"Connection = pymongo.Connection(dbconn, 27017)db = Connection.sinainfostrtime = time.strftime("%Y", time.localtime())dbthisyear = db[strtime]dbproduct = db["product"]class IndexHandler(BaseHandler):    @tornado.web.authenticated    def _get(self, *args, **kwargs):        spage = self.get_argument('page', '1')        ipage = int(spage)        sgroup = self.get_argument('group', '21')        igroup = int(sgroup)        news = []#"ContentType" : "news" ,        collection = dbthisyear.find({"GroupID": sgroup}, timeout=False).sort([("Date", -1)]).skip(            (ipage - 1) * 10).limit(10)        for r in collection:            r.pop("_id")            if r.has_key("Content"):                news.append(r)            else:                r["Content"] = ""                news.append(r)                print r        selected = dict(            jk=dbthisyear.find({"GroupID": "21", "State": "selected"}, timeout=False).count(),            kj=dbthisyear.find({"GroupID": "4", "State": "selected"}, timeout=False).count(),            cj=dbthisyear.find({"GroupID": "3", "State": "selected"}, timeout=False).count(),            sh=dbthisyear.find({"GroupID": "9", "State": "selected"}, timeout=False).count(),            yl=dbthisyear.find({"GroupID": "5", "State": "selected"}, timeout=False).count(),            jy=dbthisyear.find({"GroupID": "8", "State": "selected"}, timeout=False).count(),            xz=dbthisyear.find({"GroupID": "22", "State": "selected"}, timeout=False).count(),            mt=dbthisyear.find({"GroupID": "11", "State": "selected"}, timeout=False).count(),            all=dbthisyear.find({"State": "selected"}, timeout=False).count(),            gtotal=dbthisyear.find({"GroupID": sgroup}, timeout=False).count())        self.render('source_lib.html', news=news, page=ipage, group=igroup, selected=selected)class IndexHandlerEx(BaseHandler):    def _get(self, *args, **kwargs):        spage = self.get_argument('page', '1')        ipage = int(spage)        sgroup = self.get_argument('group', '21')        igroup = int(sgroup)        news = []#"ContentType" : "news" ,        collection = dbthisyear.find({"GroupID": sgroup}, timeout=False).sort([("Date", -1)]).skip(            (ipage - 1) * 10).limit(10)        for r in collection:            r.pop("_id")            if r.has_key("Content"):                news.append(r)            else:                r["Content"] = ""                news.append(r)                print r        selected = dict(            jk=dbthisyear.find({"GroupID": "21", "State": "selected"}, timeout=False).count(),            kj=dbthisyear.find({"GroupID": "4", "State": "selected"}, timeout=False).count(),            cj=dbthisyear.find({"GroupID": "3", "State": "selected"}, timeout=False).count(),            sh=dbthisyear.find({"GroupID": "9", "State": "selected"}, timeout=False).count(),            yl=dbthisyear.find({"GroupID": "5", "State": "selected"}, timeout=False).count(),            jy=dbthisyear.find({"GroupID": "8", "State": "selected"}, timeout=False).count(),            xz=dbthisyear.find({"GroupID": "22", "State": "selected"}, timeout=False).count(),            mt=dbthisyear.find({"GroupID": "11", "State": "selected"}, timeout=False).count(),            a1=dbthisyear.find({"GroupID": "1", "State": "selected"}, timeout=False).count(),            a2=dbthisyear.find({"GroupID": "2", "State": "selected"}, timeout=False).count(),            a6=dbthisyear.find({"GroupID": "6", "State": "selected"}, timeout=False).count(),            a7=dbthisyear.find({"GroupID": "7", "State": "selected"}, timeout=False).count(),            all=dbthisyear.find({"State": "selected"}, timeout=False).count(),            gtotal=dbthisyear.find({"GroupID": sgroup}, timeout=False).count())        self.render('src_lib.html', news=news, page=ipage, group=igroup, selected=selected)class SelectedHandler(BaseHandler):    @tornado.web.authenticated    def get(self):        spage = self.get_argument('page', '1')        ipage = int(spage)        sgroup = self.get_argument('group', '21')        igroup = int(sgroup)        #sgroup = "\"" + sgroup + "\""        news = []#"ContentType" : "news",        collection = dbthisyear.find({"GroupID": sgroup, "State": "selected"}, timeout=False).sort([("Date", -1)]).skip(            (ipage - 1) * 10).limit(10)        for r in collection:            r.pop("_id")            news.append(r)        selected = dict(            jk=dbthisyear.find({"GroupID": "21", "State": "selected"}, timeout=False).count(),            kj=dbthisyear.find({"GroupID": "4", "State": "selected"}, timeout=False).count(),            cj=dbthisyear.find({"GroupID": "3", "State": "selected"}, timeout=False).count(),            sh=dbthisyear.find({"GroupID": "9", "State": "selected"}, timeout=False).count(),            yl=dbthisyear.find({"GroupID": "5", "State": "selected"}, timeout=False).count(),            jy=dbthisyear.find({"GroupID": "8", "State": "selected"}, timeout=False).count(),            xz=dbthisyear.find({"GroupID": "22", "State": "selected"}, timeout=False).count(),            mt=dbthisyear.find({"GroupID": "11", "State": "selected"}, timeout=False).count(),            all=dbthisyear.find({"State": "selected"}, timeout=False).count(),            gtotal=dbthisyear.find({"GroupID": sgroup}, timeout=False).count())        self.render('selected_lib.html', news=news, page=ipage, group=igroup, selected=selected)class ReleaseHandler(BaseHandler):    @tornado.web.authenticated    def get(self):        dbproduct        products = []        data = {}        data["title"] = time.strftime("%Y-%m-%d", time.localtime())        data["date"] = (datetime.datetime.now() + datetime.timedelta(hours=8)).strftime(            '%Y-%m-%d %H:%M') #time.strftime("%Y-%m-%d %H:%M", time.localtime())        data["url"] = ""        products.append(data)        collection = dbproduct.find(timeout=False).sort([("date", -1)]).limit(10)        for r in collection:            products.append(r)        self.render('release_lib.html', products=products)class LoginHandler(BaseHandler):    def get(self):        msg = unquote(self.get_argument('msg', ''))        self.render('login.html', msg=msg)class UserLoginHandler(BaseHandler):    def post(self):        username = str(self.get_argument('username', ''))        password = str(self.get_argument('password', ''))        user = {}        user["username"] = "user"        user['pid'] = "1"        if username == "1" and password == "1":            user['uid'] = user['pid']            user['role'] = None            self._session.set('user', user)            self.redirect( '/')        else:            msg = quote('auth failed!')            self.redirect('/login?msg=' + msg)class LogoutHandler(BaseHandler):    def get(self):        self._session.destroy()        self.redirect(self.get_login_url())class AuthFailHandler(BaseHandler):    def _get(self, *args, **kwargs):        msg = quote('no rights!')        self.redirect('/login?msg=' + msg)class ErrorHandler(BaseHandler):    def get(self):        self.write_error(404)    def write_error(self, status_code, **kwargs):        if status_code == 404:            self.render('500.htm')        elif status_code == 500:            self.render('500.htm')        else:            self.write('error:' + str(status_code))